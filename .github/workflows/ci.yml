name: CI

on:
  push:
    branches:
      - main
  release:
    types: [published]

# Limit concurrency to one per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Android targets (client only)
          - target: aarch64-linux-android
            os: ubuntu-latest
          - target: armv7-linux-androideabi
            os: ubuntu-latest
          - target: x86_64-linux-android
            os: ubuntu-latest
          - target: i686-linux-android
            os: ubuntu-latest
          # Windows (client only)
          - target: x86_64-pc-windows-gnullvm
            os: ubuntu-latest
          - target: i686-pc-windows-gnullvm
            os: ubuntu-latest
          # macOS (client only)
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          # Linux (client and server)
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          # - target: aarch64-unknown-linux-musl
          # os: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - uses: cargo-bins/cargo-binstall@main
        if: contains(matrix.target, 'android')

      - name: Build Android client
        if: contains(matrix.target, 'android')
        run: |
          cargo binstall cargo-ndk &&
            cargo ndk -t ${{ matrix.target }} build --release -p client

      - name: Setup mingw for windows build
        if: contains(matrix.target, 'windows')
        uses: egor-tensin/setup-mingw@v2

      - name: Build client
        if: "!contains(matrix.target, 'android')"
        run: cargo build --release --target ${{ matrix.target }} -p client

      - name: Build Server
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          cargo build --release --target ${{ matrix.target }} -p server

      - name: Test
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          cargo test

      - name: Rename Windows artifacts
        if: contains(matrix.target, 'windows')
        run: |
          mkdir -p upload &&
            cp target/${{ matrix.target }}/release/standalone* upload/standalone-${{ matrix.target }}.exe

      - name: Rename clients
        if: "!contains(matrix.target, 'windows')"
        run: |
          mkdir -p upload &&
            cp target/${{ matrix.target }}/release/standalone* upload/standalone-${{ matrix.target }}

      - name: Rename server
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          mkdir -p upload && cp target/${{ matrix.target }}/release/server* upload/server-${{ matrix.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ext }}-binaries
          path: upload/*

  release-upload:
    name: Upload to Release
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
