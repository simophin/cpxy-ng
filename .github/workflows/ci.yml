name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [ synchronize, opened, reopened ]
  release:
    types: [ published ]

# Limit concurrency to one per branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build_android_app:
    name: Build Android app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Install all the required targets
        run: >
          rustup target add 
          aarch64-linux-android 
          armv7-linux-androideabi 
          x86_64-linux-android 
          i686-linux-android

      - uses: cargo-bins/cargo-binstall@main
      - name: Install cargo-ndk
        run: cargo binstall cargo-ndk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build libraries
        run: >
          cargo ndk
          -t aarch64-linux-android
          -t armv7-linux-androideabi
          -t x86_64-linux-android
          -t i686-linux-android
          -o client/android-app/app/src/main/jniLibs
          build --release -p client --lib

      - name: Build APK
        run: ./gradlew assembleRelease
        working-directory: client/android-app

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-app-release.apk
          path: client/android-app/app/build/outputs/apk/release/app-release.apk

  build_executables:
    name: Build executables
    strategy:
      matrix:
        target:
          - rust: x86_64-pc-windows-msvc
            runs_on: windows-latest
            binary_ext: .exe
          - rust: i686-pc-windows-msvc
            runs_on: windows-latest
            binary_ext: .exe
          - rust: x86_64-unknown-linux-musl
            runs_on: ubuntu-latest
            build_with_cross: true
          - rust: aarch64-unknown-linux-musl
            runs_on: ubuntu-latest
            build_with_cross: true
          - rust: x86_64-apple-darwin
            runs_on: macos-latest
          - rust: aarch64-apple-darwin
            runs_on: macos-latest
          - rust: aarch64-linux-android
            runs_on: ubuntu-latest
            build_with_ndk: true
          - rust: armv7-linux-androideabi
            runs_on: ubuntu-latest
            build_with_ndk: true
          - rust: x86_64-linux-android
            runs_on: ubuntu-latest
            build_with_ndk: true
          - rust: i686-linux-android
            runs_on: ubuntu-latest
            build_with_ndk: true
    runs-on: ${{ matrix.target.runs_on }}
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target.rust }}
      - uses: cargo-bins/cargo-binstall@main

      - name: Install cross
        if: matrix.target.build_with_cross == true
        run: cargo binstall cross
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with cross
        if: matrix.target.build_with_cross == true
        run: cross build --release --target ${{ matrix.target.rust }}

      - name: Install NDK
        if: matrix.target.build_with_ndk == true
        run: cargo binstall cargo-ndk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with NDK
        if: matrix.target.build_with_ndk == true
        run: cargo ndk -t ${{ matrix.target.rust }} build --release

      - name: Build
        if: matrix.target.build_with_cross != true && matrix.target.build_with_ndk != true
        run: cargo build --release --target ${{ matrix.target.rust }}

      - name: Rename files
        run:
          mkdir artifacts &&
          mv -v target/${{ matrix.target.rust }}/release/standalone${{ matrix.target.binary_ext }} artifacts/client-${{ matrix.target.rust }}${{ matrix.target.binary_ext }} &&
          mv -v target/${{ matrix.target.rust }}/release/client_cn${{ matrix.target.binary_ext }} artifacts/client_cn-${{ matrix.target.rust }}${{ matrix.target.binary_ext }} &&
          mv -v target/${{ matrix.target.rust }}/release/server${{ matrix.target.binary_ext }} artifacts/server-${{ matrix.target.rust }}${{ matrix.target.binary_ext }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executables-${{ matrix.target.rust }}
          path: artifacts

  test:
    name: Run tests on main platform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - name: Test
        run: cargo test

  release-upload:
    name: Upload to Release
    permissions:
      contents: write
    needs:
      - build_android_app
      - build_executables
      - test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
